---
scope: postgres-ha
namespace: /patroni-postgres/
name: pg-instance0

restapi:
  listen: 192.168.56.153:8008
  connect_address: 192.168.56.153:8008
#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key
#  authentication:
#    username: username
#    password: password

# ctl:
#   insecure: false # Allow connections to SSL sites without certs
#   certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#   cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem

etcd:
  #Provide host to do the initial discovery of the cluster topology:
  # host: 192.168.56.153:2379
  #Or use "hosts" to provide multiple endpoints
  #Could be a comma separated string:
   hosts: 192.168.56.150:2379,192.168.56.151:2379,192.168.56.152:2379
  #Once discovery is complete Patroni will use the list of advertised clientURLs
  #It is possible to change this behavior through by setting:
  #use_proxies: true

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a 'global configuration'
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
#    master_start_timeout: 300
#    synchronous_mode: false
    #standby_cluster:
      #host: 127.0.0.1
      #port: 1111
      #primary_slot_name: patroni
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        wal_level: hot_standby
        hot_standby: "on"
        wal_keep_segments: 8
        max_wal_senders: 10
        max_replication_slots: 10
        wal_log_hints: "on"
        archive_mode: "on"
        archive_timeout: 1800s
        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f
      recovery_conf:
        restore_command: cp ../wal_archive/%f %p

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - auth-host: scram-sha-256
  - auth-local: peer
  - locale: en_US.UTF-8
  - encoding: UTF8
  - data-checksums

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
    # For kerberos gss based connectivity (discard @.*$)
  #- host replication replicator 127.0.0.1/32 gss include_realm=0
  #- host all all 0.0.0.0/0 gss include_realm=0
  - local   all             all                                     peer
  # IPv4 local connections:
  -  host    all             all             0.0.0.0/0             scram-sha-256
  -  host    all             all             127.0.0.1/32          scram-sha-256
  -  host    all             all             192.168.56.0/24       scram-sha-256
  # IPv6 local connections:
  -  host    all             all             ::1/128               scram-sha-256
  # Allow replication connections from localhost, by a user with the
  # replication privilege.
  - local   replication     all                                     peer
  - host    replication     replicator             127.0.0.1/32     scram-sha-256
  - host    replication     replicator             ::1/128          scram-sha-256
  - host    replication     replicator             192.168.56.0/24  scram-sha-256
  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # Some additional users users which needs to be created after initializing new cluster
  users:
    admin:
      password: admin
      options:
        - createrole
        - createdb

postgresql:
  listen: 192.168.56.153:5432
  connect_address: 192.168.56.153:5432
  data_dir: /data/patroni
  bin_dir: /usr/pgsql-12/bin
  config_dir: /etc/patroni
  pgpass: /var/lib/pgsql/12/.pgpass
  authentication:
    replication:
      username: replicator
      password: rep-pass
    superuser:
      username: postgres
      password: pg
    rewind:  # Has no effect on postgres 10 and lower
      username: rewind_user
      password: rewind_password
  # Server side kerberos spn
#  krbsrvname: postgres
  parameters:
    # Fully qualified kerberos ticket file for the running user
    # same as KRB5CCNAME used by the GSS
#   krb_server_keyfile: /var/spool/keytabs/postgres
    unix_socket_directories: '.'

watchdog:
  mode: automatic # Allowed values: off, automatic, required
  device: /dev/watchdog
  safety_margin: 5

tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  nosync: false

log:
  dir: /var/log/pgsql/12
  level: INFO
  file_num: 3
